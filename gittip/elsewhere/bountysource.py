import gittip
import logging
import requests
import os
import md5
import time
import re
from aspen import json, log, Response
from aspen.website import Website
from aspen.utils import typecheck
from gittip import db
from gittip.models import Participant
from gittip.elsewhere import ACTIONS, AccountElsewhere, _resolve

participant = 'Bountysource'
api_host = "http://api.bountysource.dev/"
www_host = "http://www.bountysource.dev/"

class BountysourceAccount(AccountElsewhere):
    platform = u'bountysource'

    def get_url(self):
        url = "https://www.bountysource.com/#users/%s" % self.user_info["slug"]
        return url


def create_access_token(participant):
    """Return an access token for the Bountysource API for this user.
    """
    time_now = int(time.time())
    token = "%s.%s.%s" % (participant.id, time_now, hash_access_token(participant.id, time_now))
    return token


def hash_access_token(user_id, time_now):
    """Create hash for access token.
    :param user_id:
        ID of the user.

    :param time_now:
        Current time, in seconds, as an integer.

    :returns:
        MD5 hash of user_id, time, and Bountysource API secret
    """
    raw = "%s.%s.%s" % (user_id, time_now, os.environ['BOUNTYSOURCE_API_SECRET'].decode('ASCII'))
    return md5.new(raw).hexdigest()


def resolve(login):
    return _resolve(u'bountysource', u'login', login)


def oauth_url(website, participant, redirect_url=None):
    """Return a URL to authenticate with Bountysource.

    Creates an accesstoken from the participant, used at Bountysource to associate accounts.
    
    :param participant:
        The participant whose account is being linked
    
    :param redirect_url:
        Optional redirect URL after authentication. Defaults to value defined in local.env
    
    :returns:
        URL for Bountysource account authorization
    """
    return "/on/bountysource/redirect"


def search_url(query):
    """Return search URL at Bountysource for query
    """
    url = "%s#search?query=%s"
    return url % (www_host, query)


def access_token_valid(access_token):
    """Helper method to check validity of access token.
    """
    parts = (access_token or '').split('.')
    return len(parts) == 3 and parts[2] == hash_access_token(parts[0], parts[1])


def get_participant_via_access_token(access_token):
    """From a Gittip access token, attempt to find an external account
    
    :param user:
        currently logged in user.
        
    :param access_token:
        access token generated by Gittip on account link redirect
        
    :returns:
        the participant, if found
    """
    if access_token_valid(access_token):
        # from the user id in access token, query participant database for a username,
        # since that is the primary key user to find a Participant model.
        # There is probably a better way to do this, like querying with the id itself.
        parts = access_token.split('.')
        participant_id = parts[0];
        row = db.fetchone("""
            SELECT username
            FROM participants
            WHERE id = %s
        """, (participant_id))
        if row:
            username = row['username']
            participant = Participant.query.get(username)
            return participant


def filter_params(params):
    """Filter the dictionary of params for a Bountysource account.
    This is so that the Bountysource access token doesn't float
    around in a user_info hash (considering nothing else does that).
    """
    whitelist = ['id', 'display_name', 'first_name', 'last_name', 'email', 'avatar_url']
    filtered_params = {}
    for key in params:
        if key in whitelist:
            filtered_params[key] = params[key]
    
    return filtered_params


def item_number_to_url(item_number):
    """Convert an item number to a URL on bountysource.
    item_number is stored on the note column of bounty/pledge exchange rows.
    """
    bounty_regex = re.compile('^issues/(\d+)$')
    pledge_regex = re.compile('^fundraisers/(\d+)(?:/(\d+))$')
    
    if bounty_regex.match(item_number):
        match = bounty_regex.match(item_number)
        return "%s#issues/%s" % (www_host, match.group(1))
    
    elif pledge_regex.match(item_number):
        match = pledge_regex.match(item_number)
        return "%s#fundraisers/%s" % (www_host, match.group(1))







